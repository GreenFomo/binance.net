using BinanceDotNet.exceptions;
using BinanceDotNet.models;
using BinanceDotNet.models.converters;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace BinanceDotNet.clients {
    public class BinanceClient {
        private BinanceConnecter _connecter;
        private RawResponse lastResponse;
        public RawResponse LastResponse { get { return lastResponse; } }

        public BinanceClient() {
            _connecter = new BinanceConnecter();
        }

        public BinanceClient(ClientConfig _cfg) {
            _connecter = new BinanceConnecter(_cfg);
        }

        public void SetApiDetails(string _apiKey, string _apiSecret) {
            _connecter.SetApiDetails(_apiKey, _apiSecret);
        }

        public async Task<RawResponse> Ping() {
            lastResponse = await _connecter.PublicRequest("v1/ping");
            return lastResponse;
        }

        public async Task<RawResponse> GetTime() {
            lastResponse = await _connecter.PublicRequest("v1/time");
            return lastResponse;
        }

        public async Task<Depth> GetDepth(string pair, int limit = 100) {
            var resp = await _connecter.PublicRequest($"v1/depth?symbol={pair}&limit={limit}");
            lastResponse = resp;

            return JsonConvert.DeserializeObject<Depth>(resp.Content, new CustomDepthConverter());
        }

        //
        public async Task<List<AggregateTrade>> GetAggTrades(string pair, long fromId = 0, long startTime = 0, long endTime = 0, int limit = 500) {
            var resp = await _connecter.PublicRequest($"v1/aggTrades?symbol={pair}");
            lastResponse = resp;

            return JsonConvert.DeserializeObject<List<AggregateTrade>>(resp.Content);
        }

        //
        public async Task<List<Candlestick>> GetCandlesticks(string pair) {
            var interval = "15m";
            var resp = await _connecter.PublicRequest($"v1/klines?symbol={pair}&interval={interval}");
            lastResponse = resp;

            return JsonConvert.DeserializeObject<List<Candlestick>>(resp.Content, new CustomCandlestickConverter());
        }

        public async Task<Ticker24hr> GetTicker24h(string pair) {
            var resp = await _connecter.PublicRequest($"v1/ticker/24hr?symbol={pair}");
            lastResponse = resp;

            return JsonConvert.DeserializeObject<Ticker24hr>(resp.Content);
        }

        public async Task<List<Ticker>> GetAllTickers() {
            var resp = await _connecter.PublicRequest($"v1/ticker/allPrices");
            lastResponse = resp;

            return JsonConvert.DeserializeObject<List<Ticker>>(resp.Content);
        }

        public async Task<List<BookTicker>> GetBookTickers() {
            var resp = await _connecter.PublicRequest($"v1/ticker/allBookTickers");
            lastResponse = resp;

            return JsonConvert.DeserializeObject<List<BookTicker>>(resp.Content);

        }

        //
        public async Task<AccountInfo> GetAccountInfo() {
            var resp = await _connecter.PrivateRequest("v3/account", null);
            lastResponse = resp;

            return JsonConvert.DeserializeObject<AccountInfo>(resp.Content);
        }

        public async Task<List<Order>> GetAllOrders(string symbol) {
            var data = new Dictionary<string, string> {
                {"symbol", symbol }
            };

            var resp = await _connecter.PrivateRequest("v3/allOrders", data);
            lastResponse = resp;

            return JsonConvert.DeserializeObject<List<Order>>(resp.Content);
        }

        public async Task<List<Order>> GetOpenOrders(string symbol) {
            var data = new Dictionary<string, string> {
                {"symbol", symbol }
            };

            var resp = await _connecter.PrivateRequest("v3/openOrders", data);
            lastResponse = resp;

            return JsonConvert.DeserializeObject<List<Order>>(resp.Content);
        }

        public async Task<Order> GetOrder(string symbol, string origClientOrderId = null, long orderId = -1) {
            if (origClientOrderId == null && orderId == -1) {
                throw new BinanceBadApiRequest("For GET /order endpoint, you must specify either the original client order ID, or the order ID generated by Binance");
            }
            var data = new Dictionary<string, string> {
                {"symbol", symbol }
            };

            var resp = await _connecter.PrivateRequest("v3/order", data);
            lastResponse = resp;

            return JsonConvert.DeserializeObject<Order>(resp.Content);
        }

        public async Task<CancelledOrder> CancelOrder(string symbol, string origClientOrderId = null, long orderId = -1) {
            if (origClientOrderId == null && orderId == -1) {
                throw new BinanceBadApiRequest("For DELETE /order endpoint, you must specify either the original client order ID, or the order ID generated by Binance");
            }
            var data = new Dictionary<string, string> {
                {"symbol", symbol }
            };

            var resp = await _connecter.PrivateRequest("v3/order", data, HttpMethod.Delete);
            lastResponse = resp;

            return JsonConvert.DeserializeObject<CancelledOrder>(resp.Content);
        }

        public async Task<List<MyTrade>> GetMyTrades(string symbol) {
            var data = new Dictionary<string, string> {
                {"symbol", symbol }
            };

            var resp = await _connecter.PrivateRequest("v3/myTrades", data);
            lastResponse = resp;

            return JsonConvert.DeserializeObject<List<MyTrade>>(resp.Content);
        }

        public async Task<RawResponse> TestNewOrder(string symbol) {
            var data = new Dictionary<string, string> {
                { "symbol", symbol },
                { "side", "SELL" },
                { "recvWindow", "6500" },
                { "type", "LIMIT" },
                { "timeInForce", "GTC" },
                { "quantity", "1000" },
                { "price", "0.001" }
            };

            lastResponse = await _connecter.PrivateRequest("v3/order/test", data, HttpMethod.Post);

            return lastResponse;
        }


    }
}
